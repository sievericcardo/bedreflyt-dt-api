class TaskDependencyModel extends KindModel ()
    override Unit adaptAddition()
        List<TaskDependency> newTaskDeps = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?treatmentName ?diagnosisName ?taskName ?taskDependency {
                ?x a ast:TaskDependency ;
                    ast:treatment ?treatmentName ;
                    ast:diagnosisCode ?diagnosisName ;
                    ast:taskDependent ?taskName ;
                    ast:taskToWait ?taskDependency .
                FILTER NOT EXISTS {
                    ?y a prog:TaskDependency ;
                        prog:TaskDependency_treatmentName ?treatmentName ;
                        prog:TaskDependency_diagnosisName ?diagnosisName ;
                        prog:TaskDependency_taskName ?taskName ;
                        prog:TaskDependency_taskDependency ?taskDependency .
                }
            }
        ");

        if newTaskDeps != null then
            print("RECONFIG> New TaskDependency(s) detected: repairing the model");

            while newTaskDeps != null do
                TaskDependency newTaskDep = newTaskDeps.content;
                List<TaskDependency> lx = newTaskDeps;
                newTaskDeps = newTaskDeps.next;
                print("RECONFIG> New task dependency detected: ");
                print("          Treatment Name: " ++ newTaskDep.treatmentName);
                print("          Diagnosis Name: " ++ newTaskDep.diagnosisName);
                print("          Task Name: " ++ newTaskDep.taskName);
                print("          Task Dependency: " ++ newTaskDep.taskDependency);

                destroy(lx);
            end

            print("RECONFIG> TaskDependency(s) added");
        end
    end

    override Unit adaptRemoval()
        List<TaskDependency> wrongTaskDeps = access("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj {
                ?obj a prog:TaskDependency ;
                     prog:TaskDependency_treatmentName ?treatmentName ;
                     prog:TaskDependency_diagnosisName ?diagnosisName ;
                     prog:TaskDependency_taskName ?taskName ;
                     prog:TaskDependency_taskDependency ?taskDependency .
                FILTER NOT EXISTS {
                    ?y a ast:TaskDependency ;
                       ast:treatment ?treatmentName ;
                       ast:diagnosisCode ?diagnosisName ;
                       ast:taskDependent ?taskName ;
                       ast:taskToWait ?taskDependency .
                }
            }
        ");

        if wrongTaskDeps != null then
            print("RECONFIG> Misconfigured TaskDependency(s) detected: repairing the model");

            while wrongTaskDeps != null do
                TaskDependency wrongTaskDep = wrongTaskDeps.content;
                List<TaskDependency> lx = wrongTaskDeps;
                wrongTaskDeps = wrongTaskDeps.next;

                print("RECONFIG> Misconfigured task dependency to remove: ");
                print("          Task Name: " ++ wrongTaskDep.taskName);
                print("          Task Dependency: " ++ wrongTaskDep.taskDependency);

                destroy(wrongTaskDep);
                destroy(lx);
            end
        end
    end

    override Unit adaptDefect()
        List<TaskDependencyDefectDependency> wrongTaskDependencies = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?taskDependencyNew {
                ?obj a prog:TaskDependency ;
                    prog:TaskDependency_treatmentName ?treatmentName ;
                    prog:TaskDependency_diagnosisName ?diagnosisName ;
                    prog:TaskDependency_taskName ?taskName ;
                    prog:TaskDependency_taskDependency ?taskDependency .
                ?y a ast:TaskDependency ;
                    ast:treatment ?treatmentName ;
                    ast:diagnosisCode ?diagnosisName ;
                    ast:taskDependent ?taskName ;
                    ast:taskToWait ?taskDependencyNew .
                FILTER (?taskDependency != ?taskDependencyNew) .
            }
        ");

        if wrongTaskDependencies != null then
            print("RECONFIG> Misconfigured TaskDependency(s) detected: repairing the model");

            while wrongTaskDependencies != null do
                TaskDependencyDefectDependency wrongTaskDependency = wrongTaskDependencies.content;
                List<TaskDependencyDefectDependency> lx = wrongTaskDependencies;
                wrongTaskDependencies = wrongTaskDependencies.next;
                destroy(lx);

                print("RECONFIG> Misconfigured task dependency to repair: ");
                print("          Treatment Name: " ++ wrongTaskDependency.obj.treatmentName);
                print("          Task Name: " ++ wrongTaskDependency.obj.taskName);
                print("          Task Dependency: " ++ wrongTaskDependency.obj.taskDependency);
                print("          Task Dependency New: " ++ wrongTaskDependency.taskDependencyNew);

                wrongTaskDependency.obj.taskDependency = wrongTaskDependency.taskDependencyNew;
            end

            print("RECONFIG> TaskDependency(s) repaired");
        end
    end
end