class RoomModel extends KindModel()

    override Unit adaptAddition()
        List<Room> newRooms = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?roomNumber ?roomNumberModel ?roomCategory ?capacity ?bathroom {
                ?x a ast:Room ;
                    ast:roomNumber ?roomNumber ;
                    ast:roomNumberModel ?roomNumberModel ;
                    ast:roomCategory ?roomCategory ;
                    ast:capacity ?capacity ;
                    ast:bathroom ?bathroom .
                FILTER NOT EXISTS {
                    ?y a prog:Room ;
                        prog:Room_roomNumber ?roomNumber ;
                        prog:Room_roomNumberModel ?roomNumberModel ;
                        prog:Room_roomCategory ?roomCategory ;
                        prog:Room_capacity ?capacity ;
                        prog:Room_bathroom ?bathroom .
                }
            }");

        if newRooms != null then
            print("RECONFIG> New Room(s) detected: repairing the model");

            while newRooms != null do
                Room newRoom = newRooms.content;
                List<Room> lx = newRooms;
                newRooms = newRooms.next;
                print("RECONFIG> New room detected: ");
                print("          Room Number: " ++ intToString(newRoom.roomNumber));
                print("          Room Number Model: " ++ intToString(newRoom.roomNumberModel));
                print("          Room: " ++ intToString(newRoom.room));
                print("          Capacity: " ++ intToString(newRoom.capacity));
                print("          Bathroom: " ++ intToString(newRoom.bathroom));

                destroy(lx);
            end

            print("RECONFIG> Room(s) added");
        end
    end

    override Unit adaptRemoval()
        List<Room> wrongRooms = access("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_roomCategory ?roomCategory ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                FILTER NOT EXISTS {
                    ?y a ast:Room ;
                        ast:roomNumber ?roomNumber .
                }
            }");

        if wrongRooms != null then
            print("RECONFIG> Misconfigured Room(s) detected: repairing the model");
            while wrongRooms != null do
                Room wrongRoom = wrongRooms.content;
                List<Room> lx = wrongRooms;
                wrongRooms = wrongRooms.next;

                print("RECONFIG> Misconfigured room distribution to remove: ");
                print("          Room Number: " ++ intToString(wrongRoom.roomNumber));
                print("          Room Number Model: " ++ intToString(wrongRoom.roomNumberModel));
                print("          Room: " ++ intToString(wrongRoom.room));
                print("          Capacity: " ++ intToString(wrongRoom.capacity));
                print("          Bathroom: " ++ intToString(wrongRoom.bathroom));

                destroy(wrongRoom);
                destroy(lx);
            end

            destroy(wrongRooms);

            print("RECONFIG> Room(s) removed");
        end
    end

    override Unit adaptDefect()
        print("RECONFIG> Checking for defects in the Room(s)");
        // this.checkRoomNumberChanged();
        // this.checkRoomNumberModelChanged();
        // this.checkRoomChanged();
        // this.checkCapacityChanged();
        //this.checkBathroomChanged();
        print("RECONFIG> Defects checked for the Room(s)");
    end

    Unit checkRoomNumberChanged()
        List<RoomDefectRoomNumber> roomNumberDefects = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?roomNumberNew {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_room ?room ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                ?y a ast:Room ;
                    ast:roomNumber ?roomNumberNew ;
                    ast:roomNumberModel ?roomNumberModel ;
                    ast:room ?room ;
                    ast:capacity ?capacity ;
                    ast:bathroom ?bathroom .
                FILTER (?roomNumber != ?roomNumberNew)
            }");

        if roomNumberDefects != null then
            print("RECONFIG> Misconfigured Room Number detected: repairing the model");
            while roomNumberDefects != null do
                RoomDefectRoomNumber roomNumberDefect = roomNumberDefects.content;
                List<RoomDefectRoomNumber> lx = roomNumberDefects;
                roomNumberDefects = roomNumberDefects.next;
                destroy(lx);

                print("RECONFIG> Misconfigured room number: ");
                print("          Old Room Number: " ++ intToString(roomNumberDefect.obj.roomNumber));
                print("          New Room Number: " ++ intToString(roomNumberDefect.roomNumberNew));

                roomNumberDefect.obj.roomNumber = roomNumberDefect.roomNumberNew;
            end

            print("RECONFIG> Room Number(s) changed");
        end
    end

    Unit checkRoomNumberModelChanged()
        List<RoomDefectRoomNumberModel> roomNumberModelDefects = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?roomNumberModelNew {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_room ?room ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                ?y a ast:Room ;
                    ast:roomNumber ?roomNumber ;
                    ast:roomNumberModel ?roomNumberModelNew ;
                    ast:room ?room ;
                    ast:capacity ?capacity ;
                    ast:bathroom ?bathroom .
                FILTER (?roomNumberModel != ?roomNumberModelNew)
            }");

        if roomNumberModelDefects != null then
            print("RECONFIG> Misconfigured Room Number Model detected: repairing the model");
            while roomNumberModelDefects != null do
                RoomDefectRoomNumberModel roomNumberModelDefect = roomNumberModelDefects.content;
                List<RoomDefectRoomNumberModel> lx = roomNumberModelDefects;
                roomNumberModelDefects = roomNumberModelDefects.next;
                destroy(lx);

                print("RECONFIG> Misconfigured room number model: ");
                print("          Old Room Number Model: " ++ intToString(roomNumberModelDefect.obj.roomNumber));
                print("          New Room Number Model: " ++ intToString(roomNumberModelDefect.roomNumberModelNew));

                roomNumberModelDefect.obj.roomNumberModel = roomNumberModelDefect.roomNumberModelNew;
            end

            print("RECONFIG> Room Number Model(s) changed");
        end
    end

    Unit checkRoomChanged()
        List<RoomDefectRoom> roomDefects = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?roomNew {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_room ?room ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                ?y a ast:Room ;
                    ast:roomNumber ?roomNumber ;
                    ast:roomNumberModel ?roomNumberModel ;
                    ast:room ?roomNew ;
                    ast:capacity ?capacity ;
                    ast:bathroom ?bathroom .
                FILTER (?room != ?roomNew)
            }");

        if roomDefects != null then
            print("RECONFIG> Misconfigured Room detected: repairing the model");
            while roomDefects != null do
                RoomDefectRoom roomDefect = roomDefects.content;
                List<RoomDefectRoom> lx = roomDefects;
                roomDefects = roomDefects.next;
                destroy(lx);

                print("RECONFIG> Misconfigured room: ");
                print("          Old Room: " ++ intToString(roomDefect.obj.room));
                print("          New Room: " ++ intToString(roomDefect.roomNew));

                roomDefect.obj.room = roomDefect.roomNew;
            end

            print("RECONFIG> Room(s) changed");
        end
    end

    Unit checkCapacityChanged()
        List<RoomDefectCapacity> capacityDefects = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?capacityNew {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_room ?room ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                ?y a ast:Room ;
                    ast:roomNumber ?roomNumber ;
                    ast:roomNumberModel ?roomNumberModel ;
                    ast:room ?room ;
                    ast:capacity ?capacityNew ;
                    ast:bathroom ?bathroom .
                FILTER (?capacity != ?capacityNew)
            }");

        if capacityDefects != null then
            print("RECONFIG> Misconfigured Capacity detected: repairing the model");
            while capacityDefects != null do
                RoomDefectCapacity capacityDefect = capacityDefects.content;
                List<RoomDefectCapacity> lx = capacityDefects;
                capacityDefects = capacityDefects.next;
                destroy(lx);

                print("RECONFIG> Misconfigured capacity: ");
                print("          Capacity: " ++ intToString(capacityDefect.obj.capacity));
                print("          Capacity: " ++ intToString(capacityDefect.capacityNew));

                capacityDefect.obj.capacity = capacityDefect.capacityNew;
            end

            print("RECONFIG> Capacity(s) changed");
        end
    end

    Unit checkBathroomChanged()
        List<RoomDefectBathroom> bathroomDefects = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?bathroomNew {
                ?obj a prog:Room ;
                    prog:Room_roomNumber ?roomNumber ;
                    prog:Room_roomNumberModel ?roomNumberModel ;
                    prog:Room_room ?room ;
                    prog:Room_capacity ?capacity ;
                    prog:Room_bathroom ?bathroom .
                ?y a ast:Room ;
                    ast:roomNumber ?roomNumber ;
                    ast:roomNumberModel ?roomNumberModel ;
                    ast:room ?room ;
                    ast:capacity ?capacity ;
                    ast:bathroom ?bathroomNew .
                FILTER (?bathroom != ?bathroomNew)
            }");

        if bathroomDefects != null then
            print("RECONFIG> Misconfigured Bathroom detected: repairing the model");
            while bathroomDefects != null do
                RoomDefectBathroom bathroomDefect = bathroomDefects.content;
                List<RoomDefectBathroom> lx = bathroomDefects;
                bathroomDefects = bathroomDefects.next;
                destroy(lx);

                print("RECONFIG> Misconfigured bathroom: ");
                print("          Old Bathroom: " ++ intToString(bathroomDefect.obj.bathroom));
                print("          New Bathroom: " ++ intToString(bathroomDefect.bathroomNew));

                bathroomDefect.obj.bathroom = bathroomDefect.bathroomNew;
            end

            print("RECONFIG> Bathroom(s) changed");
        end
    end
end