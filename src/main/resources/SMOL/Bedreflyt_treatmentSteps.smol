class TreatmentStepModel extends BaseModel ()
    override Unit adaptAddition()
        List<TreatmentStep> newTaskDeps = construct("
        PREFIX : <http://www.smolang.org/bedreflyt/>
        PREFIX time: <http://www.w3.org/2006/time#>
        PREFIX pko: <https://w3id.org/pko#>

        SELECT DISTINCT ?treatmentName ?task ?monitoringCategory ?staffLoad ?averageDuration
        WHERE {
            ?taskDep a :TreatmentStep ;
                :hasNurseBurden ?staffLoad ;
                time:hours ?averageDuration ;
                :hasMonitoringStatus ?monitoringStatus ;
                :stepOfTreatment ?treatment ;
                :hasTask ?taskObj .
            ?treatment a pko:Procedure ;
                :procedureName ?treatmentName .

            ?monitoringStatus a :MonitoringCategory ;
                :monitoringName ?monitoringCode .
            ?monitoringCategory a prog:MonitoringCategory ;
                prog:MonitoringCategory_description ?monitoringCode .

            ?taskObj rdf:type <http://purl.org/net/p-plan#Step> ;
                :taskName ?taskName .
            ?task a prog:Task ;
                prog:Task_taskName ?taskName .
        }");

        print(newTaskDeps);
        
        if newTaskDeps != null then
            print("RECONFIG> Adding new task dependencies...");
            
            while newTaskDeps != null do
                TreatmentStep newTaskDep = newTaskDeps.content;
                List<TreatmentStep> lx = newTaskDeps;

                TreatmentStep previousTask = newTaskDep.getPreviousTask();
                if previousTask != null then
                    newTaskDep.previousTask = previousTask;
                end
                TreatmentStep nextTask = newTaskDep.getNextTask();
                if nextTask != null then
                    newTaskDep.nextTask = nextTask;
                end

                newTaskDeps = newTaskDeps.next;
                
                print("RECONFIG> Adding task dependency " ++ newTaskDep.task.taskName ++ " for treatment " ++ newTaskDep.treatmentName);
                print("          Staff load: " ++ doubleToString(newTaskDep.staffLoad));
                print("          Average duration: " ++ doubleToString(newTaskDep.averageDuration));

                destroy(lx);
            end
            
            print("RECONFIG> New task dependencies added");
        end
    end

    override Unit adaptRemoval()
        List<TreatmentStep> wrongTaskDeps = access("
        PREFIX : <http://www.smolang.org/bedreflyt/>
        PREFIX time: <http://www.w3.org/2006/time#>
        PREFIX pko: <https://w3id.org/pko#>

        SELECT DISTINCT ?obj {
            ?obj a prog:TreatmentStep ;
                prog:TreatmentStep_treatmentName ?treatmentName ;
                prog:TreatmentStep_task ?task ;
                prog:TreatmentStep_previousTask ?previousTask ;
                prog:TreatmentStep_nextTask ?nextTask ;
                prog:TreatmentStep_monitoringCategory ?monitoringCategory ;
                prog:TreatmentStep_staffLoad ?staffLoad ;
                prog:TreatmentStep_averageDuration ?averageDuration .
            FILTER NOT EXISTS {
                ?taskDep a :TreatmentStep ;
                    :hasNurseBurden ?staffLoad ;
                    time:hours ?averageDuration ;
                    :stepOfTreatment ?treatment ;
                    :hasTask ?taskObj .
                ?treatment a pko:Procedure ;
                    :procedureName ?treatmentName .
                ?taskObj rdf:type <http://purl.org/net/p-plan#Step> ;
                    :taskName ?taskName .
                ?task a prog:Task ;
                    prog:Task_taskName ?taskName .
            }
        }");

        if wrongTaskDeps != null then
            print("RECONFIG> Removing wrong task dependencies...");
            
            while wrongTaskDeps != null do
                TreatmentStep wrongTaskDep = wrongTaskDeps.content;
                List<TreatmentStep> lx = wrongTaskDeps;
                wrongTaskDeps = wrongTaskDeps.next;
                
                print("RECONFIG> Removing task dependency " ++ wrongTaskDep.task.taskName ++ " for treatment " ++ wrongTaskDep.treatmentName);
                destroy(wrongTaskDep);
                destroy(lx);
            end
            
            destroy(wrongTaskDeps);
            print("RECONFIG> Wrong task dependencies removed");
        end
    end

    override Unit adaptDefect()
        skip;
    end

    override Unit adaptRepair()
    //     skip;
    // end
        List<TreatmentStep> taskDeps = access("
         SELECT DISTINCT ?obj {
            ?obj a prog:TreatmentStep .
        }");

        if taskDeps != null then
            print("RECONFIG> Repairing task dependencies...");
            
            while taskDeps != null do
                TreatmentStep taskDep = taskDeps.content;
                List<TreatmentStep> lx = taskDeps;

                TreatmentStep previousTask = taskDep.getPreviousTask();
                if previousTask != null then
                    taskDep.previousTask = previousTask;
                end
                TreatmentStep nextTask = taskDep.getNextTask();
                if nextTask != null then
                    taskDep.nextTask = nextTask;
                end

                taskDeps = taskDeps.next;
                
                print("RECONFIG> Repairing task dependency " ++ taskDep.task.taskName ++ " for treatment " ++ taskDep.treatmentName);
                destroy(lx);
            end
            print("RECONFIG> Task dependencies repaired");
        end
    end
end