class JourneyStepModel extends KindModel()

    override Unit adaptAddition()
        List<JourneyStep> newJourneySteps = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT ?diagnosis ?journeyOrder ?task {
                ?x a ast:JourneyStep ;
                    ast:diagnosis ?diagnosis ;
                    ast:journeyOrder ?journeyOrder ;
                    ast:task ?task .
                FILTER NOT EXISTS {
                    ?y a prog:JourneyStep ;
                        prog:JourneyStep_diagnosis ?diagnosis ;
                        prog:JourneyStep_journeyOrder ?journeyOrder ;
                        prog:JourneyStep_task ?task .
                }
            }");

        if newJourneySteps != null then
            print("RECONFIG> New JourneyStep(s) detected: repairing the model");

            while newJourneySteps != null do
                JourneyStep newJourneyStep = newJourneySteps.content;
                List<JourneyStep> lx = newJourneySteps;
                newJourneySteps = newJourneySteps.next;
                print("RECONFIG> New journey step detected: ");
                print("          Diagnosis: " ++ newJourneyStep.diagnosis);
                print("          Journey Order: " ++ intToString(newJourneyStep.journeyOrder));
                print("          Task: " ++ newJourneyStep.task);

                destroy(lx);
            end

            print("RECONFIG> JourneyStep(s) added");
        end
    end

    Unit adaptRemoval()
        List<JourneyStep> wrongJourneySteps = access("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj {
                ?obj a prog:JourneyStep ;
                     prog:JourneyStep_diagnosis ?diagnosis ;
                     prog:JourneyStep_journeyOrder ?journeyOrder ;
                     prog:JourneyStep_task ?task .
                FILTER NOT EXISTS {
                    ?y a ast:JourneyStep ;
                       ast:diagnosis ?diagnosis ;
                       ast:journeyOrder ?journeyOrder ;
                       ast:task ?task .
                }
            }");

        if wrongJourneySteps != null then
            print("RECONFIG> Misconfigured JourneyStep(s) detected: repairing the model");
            while wrongJourneySteps != null do
                JourneyStep wrongJourneyStep = wrongJourneySteps.content;
                List<JourneyStep> lx = wrongJourneySteps;
                wrongJourneySteps = wrongJourneySteps.next;
                destroy(lx);

                print("RECONFIG> Misconfigured journey step to remove: ");
                print("          Diagnosis: " ++ wrongJourneyStep.diagnosis);
                print("          Journey Order: " ++ intToString(wrongJourneyStep.journeyOrder));
                print("          Task: " ++ wrongJourneyStep.task);
            end

            print("RECONFIG> JourneyStep(s) removed");
        end
    end

    override Unit adaptDefect()
        print("RECONFIG> Checking for defects in the Journey Step(s)");
        this.checkOrderChanged();
        this.checkTaskChanged();
        print("RECONFIG> Defects checked in the Journey Step(s)");
    end
    

    Unit checkOrderChanged()
        List<JourneyStepDefectOrder> wrongJourneySteps = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?journeyOrderNew {
                ?obj a prog:JourneyStep ;
                     prog:JourneyStep_diagnosis ?diagnosis ;
                     prog:JourneyStep_journeyOrder ?journeyOrder ;
                     prog:JourneyStep_task ?task .
                ?y a ast:JourneyStep ;
                    ast:diagnosis ?diagnosis ;
                    ast:journeyOrder ?journeyOrderNew ;
                    ast:task ?task .
                FILTER (?journeyOrder != ?journeyOrderNew)
            }");

        if wrongJourneySteps != null then
            print("RECONFIG> Misconfigured JourneyStep(s) detected: repairing the model");
            while wrongJourneySteps != null do
                JourneyStepDefectOrder wrongJourneyStep = wrongJourneySteps.content;
                List<JourneyStepDefectOrder> lx = wrongJourneySteps;
                wrongJourneySteps = wrongJourneySteps.next;
                destroy(lx);

                print("RECONFIG> Misconfigured journey step to remove: ");
                print("          Diagnosis: " ++ wrongJourneyStep.diagnosis);
                print("          Journey Order: " ++ intToString(wrongJourneyStep.journeyOrder));
                print("          Task: " ++ wrongJourneyStep.task);

                wrongJourneyStep.obj.journeyOrder = wrongJourneyStep.journeyOrderNew;
            end

            print("RECONFIG> JourneyStep(s) removed");
        end
    end

    Unit checkTaskChanged()
        List<JourneyStepDefectTask> wrongJourneySteps = construct("
            PREFIX ast: <http://www.smolang.org/bedreflyt#>
            SELECT DISTINCT ?obj ?taskNew {
                ?obj a prog:JourneyStep ;
                     prog:JourneyStep_diagnosis ?diagnosis ;
                     prog:JourneyStep_journeyOrder ?journeyOrder ;
                     prog:JourneyStep_task ?task .
                ?y a ast:JourneyStep ;
                    ast:diagnosis ?diagnosis ;
                    ast:journeyOrder ?journeyOrder ;
                    ast:task ?taskNew .
                FILTER (?task != ?taskNew)
            }");

        if wrongJourneySteps != null then
            print("RECONFIG> Misconfigured JourneyStep(s) detected: repairing the model");
            while wrongJourneySteps != null do
                JourneyStepDefectTask wrongJourneyStep = wrongJourneySteps.content;
                List<JourneyStepDefectTask> lx = wrongJourneySteps;
                wrongJourneySteps = wrongJourneySteps.next;
                destroy(lx);

                print("RECONFIG> Misconfigured journey step to remove: ");
                print("          Diagnosis: " ++ wrongJourneyStep.diagnosis);
                print("          Journey Order: " ++ intToString(wrongJourneyStep.journeyOrder));
                print("          Task: " ++ wrongJourneyStep.task);

                wrongJourneyStep.obj.task = wrongJourneyStep.taskNew;
            end

            print("RECONFIG> JourneyStep(s) removed");
        end
    end
end
